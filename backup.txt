
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Sign Up</title>
  <link href='https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600;700;800;900&display=swap' rel='stylesheet'>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.13.0/css/all.min.css">
  <link rel="stylesheet" href="static/signup.css">
</head>
<body>
   <div class="logo">
      <img src="static/hack.jpg" alt="Logo">
   </div>
  <div class="container">
    <h1>Welcome!</h1>
    <form id="registrationForm" action="/signupsubmit" method="post">
      <div class="form-group">
        <label for="email">Email </label>
        <input type="email" id="email" name="email" placeholder="Enter your email">
          <span class="error" id="email_error"></span>
      </div>
      <div class="form-group">
        <label for="password">Password </label>
          <div class="password-container" style="width: 330px">
        <input type="password" id="password" name="password" placeholder="Enter your password">
              <i class="far fa-eye" id="togglePassword"></i>
          </div>
          <span class="error" id="password_error"></span>
      </div>
      <div class="form-group">
        <label for="confirmPassword">Confirm Password </label>
           <div class="password-container">
        <input type="password" id="confirmPassword" name="confirmPassword" placeholder="Confirm your password">
               <i class="far fa-eye" id="togglePassword"></i>
           </div>
          <span class="error" id="confirmPassword_error"></span>
      </div>

      <button id="submitBtn" type="submit" >Sign Up</button>
    </form>
    <div class="Already-account">
      Already have an account?
      <a class="Sign-in" href="/signin">Sign in</a>
    </div>
  </div>
<script>
   document.addEventListener('DOMContentLoaded', function() {
    var submitButton = document.getElementById('submitBtn');
    var form = document.getElementById('registrationForm');

    submitButton.addEventListener('click', function(event) {
        event.preventDefault(); // Prevent the form from submitting
        var inputs = document.querySelectorAll('input');
        var firstInvalidInput = null;

        function validateInputs() {
            var elements = document.querySelectorAll('input');
            var password = document.getElementById('password');
            var confirmPassword = document.getElementById('confirmPassword');
            var isPasswordValid = password.value.length >= 8;
            var isConfirmPasswordValid = confirmPassword.value === password.value;

            elements.forEach(function(element) {
                var errorSpan = document.getElementById(element.id + '_error');
                var isEmpty = element.value === '';
                var isInput = element.tagName === 'INPUT';
                var isEmail = element.type === 'email';
                var emailRegex = /^\S+@\S+\.\S+$/; // Regular expression for email validation
                var isValidEmail = isEmail && emailRegex.test(element.value);

                element.style.borderColor = isEmpty || (isEmail && !isValidEmail) || (element.id === 'password' && !isPasswordValid) || (element.id === 'confirmPassword' && !isConfirmPasswordValid) ? 'red' : '';
                element.classList.toggle('input-error', isEmpty && isInput || (isEmail && !isValidEmail) || (element.id === 'password' && !isPasswordValid) || (element.id === 'confirmPassword' && !isConfirmPasswordValid));

                // Update error message based on the validation
                if (isEmpty) {
                    errorSpan.textContent = 'This field is required';
                } else if (isEmail && !isValidEmail) {
                    errorSpan.textContent = 'Please enter a valid email address';
                } else if (element.id === 'password' && !isPasswordValid) {
                    errorSpan.textContent = 'Password must be a minimum of 8 characters';
                } else if (element.id === 'confirmPassword' && !isConfirmPasswordValid) {
                    errorSpan.textContent = 'Passwords do not match';
                } else {
                    errorSpan.textContent = '';
                }
                errorSpan.classList.toggle('show', isEmpty || (isEmail && !isValidEmail) || (element.id === 'password' && !isPasswordValid) || (element.id === 'confirmPassword' && !isConfirmPasswordValid));

                if (!firstInvalidInput && (isEmpty || (isEmail && !isValidEmail) || (element.id === 'password' && !isPasswordValid) || (element.id === 'confirmPassword' && !isConfirmPasswordValid))) {
                    firstInvalidInput = element; // Set the first invalid input
                }
            });
        }

        validateInputs();
        if (firstInvalidInput) {
            firstInvalidInput.focus();
        } else {
            // Change the button appearance and text
            submitButton.style.backgroundColor = '#eaeaea';
            submitButton.style.color = '#696969'; // Change the font color to black
            submitButton.textContent = 'Signing up...';
            submitButton.disabled = true; // Disable the button to prevent multiple clicks

            // Delay the form submission by 2 seconds
            setTimeout(function() {
                // Reset the button appearance and text
                submitButton.style.backgroundColor = ''; // Reset to original background color
                submitButton.style.color = ''; // Reset to original font color
                submitButton.textContent = 'Sign Up';
                submitButton.disabled = false; // Enable the button again

                var formData = new FormData(form);
            fetch('/signupsubmit', {
                method: 'POST',
                body: formData
            }).then(response => response.json())
              .then(data => {
                  if (data.error) {
                      alert(data.error);  // Display an alert if there is an error
                  } else {
                      alert(data.success); // Or a success message
                      form.reset(); // Optional: reset form fields after successful registration
                  }
              }).catch(error => console.error('Error:', error));

                // Submit the form
                {#document.querySelector('form').submit();#}
            }, 1500); // 2000 milliseconds = 2 seconds
        }

        inputs.forEach(function(input) {
            input.addEventListener('input', function() {
                setTimeout(validateInputs, 1000); // Validate and update border colors
            });
        });
    });
    const togglePassword = document.querySelectorAll('.fa-eye');
    const passwords = document.querySelectorAll('#password, #confirmPassword');

    togglePassword.forEach(function(toggleIcon) {
        toggleIcon.addEventListener('click', function(e) {
            const passwordInput = this.previousElementSibling; // Assuming the input is the previous sibling of the icon
            const type = passwordInput.getAttribute('type') === 'password' ? 'text' : 'password';
            passwordInput.setAttribute('type', type);
            this.classList.toggle('fa-eye-slash');
        });
    });

});
</script>
</body>
</html>





body {
  font-family: poppins, sans-serif;
  margin: 0;
  padding: 0;
  display: flex;
  justify-content: center;
  align-items: center;
  height: 100vh;
  background-color: #fff;
}
.logo img {
 position: absolute;
 top: 3%;
 left: 2%;

 height: 70px;

}



h1 {
  text-align: center;
  margin-bottom: 50px;
}


.container {
  margin-top: 1%;
  width: 350px;
  height: 600px;
}

.form-group {
  position: relative;
  margin-bottom: 35px;

}

input {
  width: 100%;
  padding: 10px;
  border: 1px solid #ccc;
  border-radius: 5px;
  font-size: 16px;
  margin-top: 2%
}


input:focus + .label, input:not(:placeholder-shown) + .label {
  top: 5px;
  font-size: 12px;
  color: #333;
}

label[for="email"]::after {
    content: "*";
    color: red;
}

label[for="password"]::after {
    content: "*";
    color: red;
}

label[for="confirmPassword"]::after {
    content: "*";
    color: red;
}

button {
  width: 107%;
  padding: 10px;
  border: none;
  border-radius: 5px;
  background-color: #5168F6;
  color: #fff;
  font-size: 16px;
  cursor: pointer;
  font-weight: 700;
}



.Already-account{
  --tw-text-opacity: 1;
  color: rgb(102 102 102/1);
  text-align: center;
  margin-top: 1.5rem;
}

.Sign-in{
  transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
  transition-duration: .15s;
  --tw-text-opacity: 1;
  color: rgb(0 112 244/1);
  text-decoration: inherit;
}

.input-error::placeholder {
    color: red;
}

.error {
    color: red;
    font-size: 0.8em;
    margin-top: 5px;
    opacity: 0; /* Initially hidden */
    transition: opacity 1s ease-in-out; /* Transition effect */
}

.error.show {
    opacity: 1; /* Visible when the 'show' class is added */
}

#togglePassword {
    position: absolute; /* Position the icon absolutely within the container */
    margin-left: 340px; /* Adjust the position from the right edge of the container */
    top: 60%; /* Center the icon vertically */
    transform: translateY(-50%); /* Ensure the icon is centered vertically */
    cursor: pointer;
}

.password-container {
    position: relative; /* This allows absolute positioning of the icon inside the container */
    width: 350px;
    margin-right: 30px;
    cursor: pointer/* Match the width of the input field */
}



#password {
    padding-right: 30px; /* Add padding to the right to make space for the icon */
}
